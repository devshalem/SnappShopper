## API Documentation for Products Class

### Overview
This API manages products, allowing functionality such as creating, updating, retrieving, and deleting products. It supports actions like updating stock levels and filtering products by category.

### Authentication
All API endpoints require authentication via a token. The token should be passed in the `Authorization` header as a Bearer token.

---

### 1. **Create or Update Product**

#### Endpoint:
- `POST /products/save`

#### Description:
Creates a new product or updates an existing one. The product details are validated before saving to the database.

#### Request Body:
```json
{
  "name": "Product Name",
  "description": "Product description here",
  "price": 100.00,
  "category_id": 1,
  "stock": 50
}
```

#### Response:
- Success:
  ```json
  {
    "status": "success",
    "message": "Product saved successfully"
  }
  ```

- Error:
  ```json
  {
    "status": "error",
    "message": "Validation failed",
    "errors": [
      "Product name cannot be blank.",
      "Price must be greater than zero.",
      "Invalid category ID.",
      "Stock cannot be negative."
    ]
  }
  ```

---

### 2. **Get Product by ID**

#### Endpoint:
- `GET /products/{product_id}`

#### Description:
Retrieves a product's details by its `product_id`.

#### Response:
```json
{
  "product_id": 1,
  "name": "Product Name",
  "description": "Product description here",
  "price": 100.00,
  "category_id": 1,
  "stock": 50,
  "created_at": "2025-01-01T12:00:00",
  "updated_at": "2025-01-01T12:00:00"
}
```

---

### 3. **Get All Products**

#### Endpoint:
- `GET /products`

#### Description:
Retrieves a list of all products.

#### Response:
```json
{
  "products": [
    {
      "product_id": 1,
      "name": "Product Name 1",
      "description": "Description 1",
      "price": 100.00,
      "category_id": 1,
      "stock": 50,
      "created_at": "2025-01-01T12:00:00",
      "updated_at": "2025-01-01T12:00:00"
    },
    {
      "product_id": 2,
      "name": "Product Name 2",
      "description": "Description 2",
      "price": 200.00,
      "category_id": 2,
      "stock": 30,
      "created_at": "2025-01-02T12:00:00",
      "updated_at": "2025-01-02T12:00:00"
    }
  ]
}
```

---

### 4. **Get Products by Category**

#### Endpoint:
- `GET /products/category/{category_id}`

#### Description:
Retrieves a list of products filtered by the `category_id`.

#### Response:
```json
{
  "products": [
    {
      "product_id": 1,
      "name": "Product Name",
      "description": "Product description here",
      "price": 100.00,
      "category_id": 1,
      "stock": 50,
      "created_at": "2025-01-01T12:00:00",
      "updated_at": "2025-01-01T12:00:00"
    }
  ]
}
```

---

### 5. **Update Product Stock**

#### Endpoint:
- `PUT /products/{product_id}/update_stock`

#### Description:
Updates the stock level of a product by its `product_id`.

#### Request Body:
```json
{
  "stock": 100
}
```

#### Response:
- Success:
  ```json
  {
    "status": "success",
    "message": "Stock updated successfully"
  }
  ```

- Error:
  ```json
  {
    "status": "error",
    "message": "Product not found"
  }
  ```

---

### 6. **Delete Product**

#### Endpoint:
- `DELETE /products/{product_id}`

#### Description:
Deletes a product by its `product_id`.

#### Response:
- Success:
  ```json
  {
    "status": "success",
    "message": "Product deleted successfully"
  }
  ```

- Error:
  ```json
  {
    "status": "error",
    "message": "Product not found"
  }
  ```

---

### 7. **Helper Functions for Validation**

These helper functions are used for validating product data before performing actions such as creating, updating, or saving products:

- `is_blank($value)`: Checks if a value is empty or not set.

---

### Notes

1. **Product Price**: The product price must be greater than zero, and stock cannot be negative.
   
2. **Category Validation**: The `category_id` provided must exist in the `Categories` table for a valid category. If not, an error message is returned.

3. **Stock Management**: The stock level of a product can be updated at any time, ensuring accurate inventory management.

---

This API allows you to manage product listings efficiently, providing CRUD operations and stock updates, along with category-based filtering. The API ensures that products are properly validated before saving or updating to maintain data integrity.